<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://rosealice2018.github.io/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Aug 2020 23:13:12 +0800</lastBuildDate>
    
	<atom:link href="https://rosealice2018.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Newblog</title>
      <link>https://rosealice2018.github.io/post/newblog/</link>
      <pubDate>Fri, 28 Aug 2020 23:13:12 +0800</pubDate>
      
      <guid>https://rosealice2018.github.io/post/newblog/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JAVA核心技术 第四章 类与对象 第二部分</title>
      <link>https://rosealice2018.github.io/post/first/</link>
      <pubDate>Thu, 16 Jul 2020 13:28:35 +0800</pubDate>
      
      <guid>https://rosealice2018.github.io/post/first/</guid>
      <description>4.4.4 工厂方法 1.静态方法
 无法命名构造器。 当使用构造器时，无法改变所构造的对象类型。  4.5 方法参数 1.方法参数的类型
 基本数据类型（数字，布尔值） 对象引用  2.重点：在JAVA语言中，对于方法参数中的对象引用，实际上是将对象引用进行拷贝，然后再拷贝的基础上进行操作。 eg:
public static void swap(Employee x,Employee y) { Employee temp=x; x=y; y=x; }  这里并不能实现x与y的交换，因为x和y是拷贝的引用副本，在方法执行完毕后就会消失。 实际上，对象引用是按值传递的。  4.6 对象构造 4.6.1 重载  多个方法，有相同的名字，不同的参数，便产生了重载。 返回类型并非方法签名的一部分，同名且同参数的方法，不能因为返回值不同而认为重载。  4.6.2 无参数的构造器  仅当类没有提供任何构造器的时候，系统才会提供一个默认的构造器。如果在编写类的时候，给出了构造器，则（如果需要默认构造器）必须自己实现。  4.6.2 显示域初始化  在调用构造器之前，先进行赋值操作。（当一个类的所有构造器都希望将相同的值赋值给某个特定实例域时，十分有用）。  public static class Employee{ private static int nextId; private int id=assignId(); private static int assignId() { int r=nextId; nextId++; return r; } } 在C++中，不能直接初始化类的实例域。所有的域必须在构造器中设置。但是有一个特殊的初始化列表语法，如下所示</description>
    </item>
    
    <item>
      <title>JAVA核心技术  第四章 对象与类 第三部分</title>
      <link>https://rosealice2018.github.io/post/firstcome/</link>
      <pubDate>Wed, 15 Jul 2020 20:33:35 +0800</pubDate>
      
      <guid>https://rosealice2018.github.io/post/firstcome/</guid>
      <description>4.7.4 包作用域  标记为public的部分，可以被任意的类使用； 标记为private的部分只能被定义他们的类使用。 如果没有指定public或private，这个部分可以被同一个包中的所有方法访问。  4.9 文档注释  类注释  /** * * * */  方法注释  /** * *@param *@return @throws */  域注释  /** * */  通用注释 @author 姓名 @version 文本 @ since 文本 @deprecated 文本 弃用 @see 引用  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://rosealice2018.github.io/post/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%BA%94%E7%AB%A0-%E7%BB%A7%E6%89%BF-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rosealice2018.github.io/post/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%BA%94%E7%AB%A0-%E7%BB%A7%E6%89%BF-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</guid>
      <description>5.1 类，超类，子类  通常在扩展超类，定义子类的时候，仅仅需要指出子类和超类的不同之处。  5.1.2 覆盖方法  super关键字，调用父类的方法 子类可以增加域，增加方法和覆盖超类的方法，但是不能删除继承的任何域和方法  5.1.3 子类构造器 public Manager(String name,double salary,int year,int month,int day){super(name,salary,year,month,day);bonus=0;} super调用构造器的语句必须是子类构造器的第一条语句。 如果子类的构造器没有显示的调用超类的构造器，则将自动地调用超类默认（没有参数）的构造器。如果超类没有不带参数的构造器，并且在子类的构造器又没有显示的调用超类的其他构造器，则Java编译器报错。   一个对象变量可以指示多种实际类型的现象被称之为多态（polymorphism) 。在运行时能够自动的选择调用哪个方法的现象称之为动态绑定（dynamic binding). 2.** Java不支持多继承**  5.1.5 多态  “is - a”法则  5.1.6 理解方法调用  编译器查看对象的声明类型和方法名。 接下来，编译器查看调用方法时提供的参数类型。找到最匹配的调用，否则报错。（这个过程称之为重载解析（overloading resolution）。 如果是private，static，final方法或者构造器，那么编译器能够准确地知道应该调用哪个方法，我们将这种方式称之为静态绑定。  ** 在覆盖一个方法时，子类方法不能低于超类方法的可见性。特别是，如果超类的方法是public，子类的方法一定也要声明为public。**
5.1.7 阻止继承：final类和方法  不允许扩展的类称之为final类 final方法不允许被覆盖 域也可以声明为final，对于final域来说，构造对象后就不允许修改他们的值了。 如果一个类声明为final，只有其中的方法自动成为final，而不包括域。  5.1.8 强制类型转换  只能在继承层次内进行类型转换。 在超类转换成子类之前，应使用instanceof 进行检查。  5.1.9 抽象类   为了提高程序的清晰度，包含了一个或多个抽象方法的类本身必须被声明为抽象的。</description>
    </item>
    
  </channel>
</rss>